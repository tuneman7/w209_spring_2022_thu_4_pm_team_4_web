# -*- coding: utf-8 -*-
"""altair_map.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16-KS-VyqguX5AXNb3FymHyFmiUhMAe6V
"""

!pip install janitor
!pip install ConfigParser
import pandas as pd
import altair as alt
import gzip
import os

from google.colab import files
files.upload()

df = pd.read_csv('/content/top20ImportExportdataset.csv')

df.head()

coordinates = {"Australia":[-33.8469759,150.37],
              "Brazil":[-23.6815314,-46.8],
              "Canada": [43.7184038,-79.5],
              "China": [35.86166,104.195397], 
              "France":[48.8589507,2.27],
              "Germany":[52.5069312,13.14],
              "India":[19.0825223,72.741],
              "Indonesia":[-0.789275,113.921327],
              "Iran":[32.427908,53.688046],
              "Italy":[41.87194,12.56738],
              "Japan":[36.204824,138.252924],
              "Mexico":[23.634501,-102.552784],
              "Russia":[55.5815244,36.82],
              "Netherlands":[52.132633,5.291266],
              "Saudi Arabia":[23.885942,45.079162],
              "South Korea":[35.907757,127.766922],
              "Spain":[40.463667,-3.74922],
              "Switzerland":[46.818188,8.227512],
              "United Kingdom":[51.5287352,-0.3817],
              "United States":[38.89378,-77.15]}

source = alt.topo_feature(data.world_110m.url, 'countries')

import altair as alt
from vega_datasets import data
source = alt.topo_feature(data.world_110m.url, 'countries')
alt.Chart(source).mark_geoshape(
    fill='blue',
    stroke='grey',).encode(tooltip='id:N').project('naturalEarth1').properties(width=800, height=600).configure_view(stroke=None)

import folium
import pandas as pd

world_map = folium.Map(
    width=1000,
    height=500,
    zoom_start=2,
    location=[13.133932434766733, 16.103938729508073])
world_map

type(coordinates)

countries = pd.DataFrame(coordinates)
countries = countries.T
countries = countries.reset_index(drop=False)
countries.columns = ['name','latitude','longitude']

for _, c in countries.iterrows():
    folium.Marker(
        location=[c['latitude'], c['longitude']],
        popup=c['name'],
        tooltip=c['name'],
    ).add_to(world_map)

world_map

df.head()

df.loc[(df['Country'] == 'Australia') & (df['Year'] == 2020)].sort_values(['Exports1'], ascending=False).iloc[0,3]

trade_bal = {}
for key in df['Country'].unique():
  trade_hist = df.loc[(df['Country'] == key) & (df['Year'] == 2020)]
  top_export_country = df.loc[(df['Country'] == key) & (df['Year'] == 2020)].sort_values(['Exports1'], ascending=False).iloc[0,2]
  top_export         = df.loc[(df['Country'] == key) & (df['Year'] == 2020)].sort_values(['Exports1'], ascending=False).iloc[0,3]
  top_import_country = df.loc[(df['Country'] == key) & (df['Year'] == 2020)].sort_values(['Imports1'], ascending=False).iloc[0,2]
  top_import         = df.loc[(df['Country'] == key) & (df['Year'] == 2020)].sort_values(['Imports1'], ascending=False).iloc[0,3]
  trade_bal[key] = [2020, top_export_country, top_export, top_import_country, top_import]

trade_bal_df = pd.DataFrame(trade_bal).T.reset_index()
trade_bal_df.columns = ['name','year','top_export_partner','total_export','top_import_partner','total_import']

## Merge Pop up stats with coordinates
display_text = pd.merge(countries, trade_bal_df, on='name')
display_text.head()

points = list(zip(display_text.latitude, display_text.longitude, display_text.name, display_text.year, display_text.top_export_partner,display_text.total_export))

points[1]

def add_markers_to_the_map(map, display_text, color, icon):  
    points = list(zip(display_text.latitude, display_text.longitude, display_text.name, display_text.year, display_text.top_export_partner,display_text.total_export))
    for point in points:         
            popup_text = "In {}, {}'s top export partner is {} with ${}".format(str(point[3]), str(point[2]), str(point[4]), str(point[-1]))
        
            popup = folium.Popup(popup_text)
                
            marker = folium.Marker(location=[point[0], point[1]], 
                                   popup=popup, 
                                   icon = folium.Icon(color=color, icon=icon, prefix='fa')).add_to(world_map)
    return map

add_markers_to_the_map(world_map, display_text, color = 'Black' , icon = 'bookmark')